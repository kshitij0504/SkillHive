// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int          @id @default(autoincrement())
  name        String
  email       String       @unique
  password    String
  role        Role         @default(LEARNER)
  courses     Course[]     @relation("InstructorCourses")
  enrollments Enrollment[]
  reviews     Review[]
  discussions Discussion[]
  createdAt   DateTime     @default(now())
}

model Course {
  id           Int          @id @default(autoincrement())
  title        String
  description  String
  imageUrl     String?
  videoUrl     String?
  tags         String[] // like ["JavaScript", "Web Dev"]
  instructor   User         @relation("InstructorCourses", fields: [instructorId], references: [id])
  instructorId Int
  enrollments  Enrollment[]
  reviews      Review[]
  discussions  Discussion[]
  isApproved   Boolean      @default(false)
  createdAt    DateTime     @default(now())
}

model Enrollment {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  Int
  progress  Int      @default(0) // % completion
  createdAt DateTime @default(now())

  @@unique([userId, courseId]) // Prevent duplicate enrollments
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int // 1â€“5
  comment   String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  Int
  createdAt DateTime @default(now())

  @@unique([userId, courseId]) // One review per course per user
}

model Discussion {
  id        Int          @id @default(autoincrement())
  message   String
  user      User         @relation(fields: [userId], references: [id])
  userId    Int
  course    Course       @relation(fields: [courseId], references: [id])
  courseId  Int
  parentId  Int? // For threaded replies
  replies   Discussion[] @relation("ReplyThread")
  parent    Discussion?  @relation("ReplyThread", fields: [parentId], references: [id])
  createdAt DateTime     @default(now())
}

enum Role {
  LEARNER
  INSTRUCTOR
  ADMIN
}
